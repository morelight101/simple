{"version":3,"sources":["simple/core.cljs"],"mappings":";AAYA,kCAAA,lCAAMA;AAAN,AAEE,IAAMC,MAAI,KAAAC;AAAV,AACE,8BAAA,mFAAA,1GAACC,kKAAoBF;;AAKzB,GAAA,QAAAG,mCAAAC,wCAAAC;AAAA;AAAA,AAAA,AAASC,uBAAS,4CAAA,5CAACC,YAAeR;;AAKlC,yDAAA,zDAACS,yHAEA,WAAKC,EAAEA;AAAP,AAAA,kDAAA,kEAAA,kEAAA,/EACS,KAAAR;;AAIV,yDAAA,zDAACO,uIAGA,cAAAE,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASF;sBAAT,AAAAG,4CAAAD,WAAA,IAAA,7EAAWG;AAAX,AACE,wDAAA,jDAACC,8CAAMF,qEAAeC;;AAGzB,yDAAA,zDAACN,iHAEA,cAAAQ,HAAKH;AAAL,AAAA,IAAAI,aAAAD;QAAA,AAAAJ,4CAAAK,WAAA,IAAA,/DAASR;eAAT,AAAAG,4CAAAK,WAAA,IAAA,tEAAWC;AAAX,AACE,wDAAA,jDAACH,8CAAMF,wDAASK;;AAKnB,2DAAA,3DAACC,kKAEA,WAAKN,GAAGJ;AAAR,AACE,OAAA,mFAAOI;;AAEV,2DAAA,3DAACM,+KAEA,WAAKN,GAAGJ;AAAR,AACE,OAAA,gGAAaI;;AAKhB,4BAAA,5BAAMO;AAAN,AAAA,0FAAA,8EAAA,gBAAA,mFAAA,8CAaY,4CAAA,WAAAG,vDAACC;AAAD,AAAM,GAAI,CAAAD,oBAAA;AAAJ;;AAAAA;;oBAFN,qBAAA,rBAACF,jBACD,AAACC;;AAMb,2BAAA,3BAAMG;AAAN,AAAA,0FAAA,6EAAA,eAAA,mFAAA,8CAAA,mFAAA,sDAAA,2CAAA,qDAAA,SAAA,sDAAA,IAAA,+DAAA;AAAA,AAUwB,8BAAA,vBAACvB;;;AAQzB,uBAAA,vBAAMwB;AAAN,AAAA,0FAAA,oEAAA,mFAAA,8CAAA,mFAAA,sDAAA,2CAAA,qDAAA,SAAA,sDAAA,oBAAA,+DAAA;AAAA,AAQwB,8BAAA,mFAAA,1GAACxB,wLACa,AAACoB,iBAAU,qBAAA,rBAACD;;;AAGlD,iBAAA,jBAAMM;AAAN,AAAA,0FAAA,mDAAA,mFAAA,kDAAA,6BAAA,mFAAA,qFAAA,mFAAA,oFAAA,mFAAA,9RAIQ,AAACP,wKACD,AAACK,uKACD,AAACC;;AAKT,qBAAA,rBAAME;AAAN,AAEE,wDAAA,jDAACC,oIAAoBF,uBACD,wBAAA,xBAACG;;AAEvB,2CAAA,3CAAuBC;AAAvB,AAKE,AAACC;;AACD,OAACJ;;AAEH,kBAAA,lBAAMK;AAAN,AAEE,4BAAA,mFAAA,/GAACC;;AACD,OAACN","names":["simple.core/dispatch-user-event","now","js/Date","re-frame.core/dispatch","js/simple","js/simple.core","js/simple.core.do-timer","simple.core/do-timer","js/setInterval","re_frame.core.reg_event_db","_","p__27501","vec__27502","cljs.core.nth","db","new-color-value","cljs.core.assoc","p__27505","vec__27506","new-time","re_frame.core.reg_sub","simple.core/word-to-guess","simple.game/new-game","simple.game/hint","p1__27509#","cljs.core.map","simple.core/letter-input","simple.core/new-game","simple.core/ui","simple.core/render","reagent.dom.render","js/document.getElementById","simple.core/clear-cache-and-render!","re-frame.core/clear-subscription-cache!","simple.core/run","re-frame.core/dispatch-sync"],"sourcesContent":["(ns simple.core\n  (:require [reagent.dom]\n            [re-frame.core :as rf]\n            [clojure.string :as str]\n            [simple.game :as game]\n            ))\n\n;; A detailed walk-through of this source code is provided in the docs:\n;; https://day8.github.io/re-frame/dominoes-live/\n\n;; -- Domino 1 - Event Dispatch -----------------------------------------------\n\n(defn dispatch-user-event\n  []\n  (let [now (js/Date.)]\n    (rf/dispatch [:timer now])))  ;; <-- dispatch used\n\n;; Call the dispatching function every second.\n;; `defonce` is like `def` but it ensures only one instance is ever\n;; created in the face of figwheel hot-reloading of this file.\n(defonce do-timer (js/setInterval dispatch-user-event 1000))\n\n\n;; -- Domino 2 - Event Handlers -----------------------------------------------\n\n(rf/reg-event-db              ;; sets up initial application state\n :initialize                 ;; usage:  (dispatch [:initialize])\n (fn [_ _]                   ;; the two parameters are not important here, so use _\n   {:time (js/Date.)         ;; What it returns becomes the new application state\n    :time-color \"#f88\"}))    ;; so the application state will initially be a map with two keys\n\n\n(rf/reg-event-db                ;; usage:  (dispatch [:time-color-change 34562])\n ;;:time-color-change            ;; dispatched when the user enters a new colour into the UI text field\n :user-event-click\n (fn [db [_ new-color-value]]  ;; -db event handlers given 2 parameters:  current application state and event (a vector)\n   (assoc db :time-color new-color-value)))   ;; compute and return the new application state\n\n\n(rf/reg-event-db                 ;; usage:  (dispatch [:timer a-js-Date])\n :timer                         ;; every second an event of this kind will be dispatched\n (fn [db [_ new-time]]          ;; note how the 2nd parameter is destructured to obtain the data value\n   (assoc db :time new-time)))  ;; compute and return the new application state\n\n\n;; -- Domino 4 - Query  -------------------------------------------------------\n\n(rf/reg-sub\n :time\n (fn [db _]     ;; db is current app state. 2nd unused param is query vector\n   (:time db))) ;; return a query computation over the application state\n\n(rf/reg-sub\n :time-color\n (fn [db _]\n   (:time-color db)))\n\n\n;; -- Domino 5 - View Functions ----------------------------------------------\n\n(defn word-to-guess\n  []\n  ;;[:div.example-clock\n  [:div.word-to-guess\n   \"Word to guess\"\n\n   ;;{:style {:color @(rf/subscribe [:time-color])}}\n   ;; (-> @(rf/subscribe [:time])\n   ;;     .toTimeString\n   ;;     (str/split \" \")\n   ;;     first)]\n   [:p (->> (game/new-game \"test\")\n            (game/hint)\n            (map #(if (nil? %) \" _ \" %)))]])\n\n\n\n\n(defn letter-input\n  []\n  [:div.letter-input\n   \"Letter Input\"\n   [:p\n   [:input\n     {:type \"button\"\n          ;;:value @(rf/subscribe [:time-color])\n            :value \"x\"\n            ;;:on-change #(rf/dispatch [:time-color-change (-> % .-target .-value)])}]])  ;; <---\n            :on-change #(rf/dispatch [])}]]])\n\n;;TODO\n;; connect letter input\n;; show game hint !!\n;; new-game\n;; gameflow from event dispatch -> view\n\n(defn new-game\n  []\n  [:div.new-game\n   [:p\n   [:input\n     {:type \"button\"\n          ;;:value @(rf/subscribe [:time-color])\n            :value \"I want a new game\"\n            :on-change #(rf/dispatch [:div.word-to-guess\n                                      (game/hint (game/new-game \"doctronic\"))])}]]])\n\n\n(defn ui\n  []\n  [:div\n   [:h1 \"Let's play Hangman\"]\n   [:h4 (word-to-guess)]\n   [:h4 (letter-input)]\n   [:h4 (new-game)]]\n  )\n\n;; -- Entry Point -------------------------------------------------------------\n\n(defn render\n  []\n  (reagent.dom/render [ui]\n                      (js/document.getElementById \"app\")))\n\n(defn ^:dev/after-load clear-cache-and-render!\n  []\n  ;; The `:dev/after-load` metadata causes this function to be called\n  ;; after shadow-cljs hot-reloads code. We force a UI update by clearing\n  ;; the Reframe subscription cache.\n  (rf/clear-subscription-cache!)\n  (render))\n\n(defn run\n  []\n  (rf/dispatch-sync [:initialize]) ;; put a value into application state\n  (render))                         ;; mount the application's ui into '<div id=\"app\" />'\n"]}
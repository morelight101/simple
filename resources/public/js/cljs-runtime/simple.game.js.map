{"version":3,"sources":["simple/game.cljc"],"mappings":";AAGA;;;+BAAA,/BAAMA,sEAEHC;AAFH,AAGE,OAACC,6CAAKC,cAAIF;;AAEZ;;;;;8BAAA,sCAAAG,pEAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;oBAAA,AAAAE,4CAAAF,eAAA,3EAIWI;sBAJX,AAAAF,4CAAAF,eAAA,7EAIyBK;AAJzB,AAKE,OAACC,2DACG,AAACX,6BAAcS,3CACf,AAACG,2DACFF;;AAEL;;;;+BAAA,uCAAAG,tEAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAR,4BAAAQ;iBAAA,AAAAP,4CAAAO,eAAA,xEAGWE;AAHX,AAIE,uBAAA,fAAOA;;AAET;;;;+BAAA,/BAAMC,sEAGHC;AAHH,AAIE,SAAI,AAACV,4BAAUU,WAAM,AAACH,6BAAWG;;AAEnC;;;uBAAA,vBAAMC,sDAEHV;AAFH,AAAA,kDAAA,sFAAA,2EAAA,kCAAA,iEAAA,5LAGmBA;;AAInB;;;;;;2BAAA,mCAAAW,9DAAME,uEAK8BC;AALpC,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAAf,4BAAAe;WAAAA,PAK8BH;oBAL9B,AAAAX,4CAAAc,eAAA,3EAKWZ;AALX,AAME,GACE,AAACQ,6BAAWC;AAAMA;;AADpB,GAEE,AAACM,+BAAUf,cAAcc;AACzB,2DAAA,pDAACE,+CAAOP,gFAAsBQ,eAAKH;;AAHrC,AAIQ,2DAAA,pDAACE,+CAAOP,sEAAiBS;;;;;AAEnC;;;oBAAA,4BAAAC,hDAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAvB,4BAAAuB;sBAAA,AAAAtB,4CAAAsB,eAAA,7EAEWnB;AAFX,wBAGMA,hBACA,AAACqB,RACD,2CAAA;;AAEN;;;;mBAAA,2BAAAC,9CAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA3B,4BAAA2B;oBAAA,AAAA1B,4CAAA0B,eAAA,3EAGWxB;sBAHX,AAAAF,4CAAA0B,eAAA,7EAGyBvB;AAHzB,iGAKGD,7BACA,AAACT,pEACD,OAACE,6CAAKQ;;AAIT,AASA,AAQA,AASA,AAmBA,AAgBA","names":["simple.game/word->letters","word","cljs.core.mapv","cljs.core/str","p__38816","map__38817","cljs.core/--destructure-map","cljs.core.get","simple.game/game-won?","word-to-guess","correct-guesses","cljs.core._EQ_","cljs.core/set","p__38818","map__38819","simple.game/game-lost?","tries-left","simple.game/game-over?","game","simple.game/new-game","p__38820","map__38821","simple.game/guess-letter","letter","clojure.string/includes?","cljs.core.update","cljs.core/conj","cljs.core/dec","p__38822","map__38823","simple.game/score","cljs.core/count","p__38824","map__38825","simple.game/hint"],"sourcesContent":["(ns  simple.game\n  (:require [clojure.string :refer [includes?]]))\n\n(defn word->letters\n  \"Converts a string to an array of chars.\"\n  [word]\n  (mapv str word))\n\n(defn game-won?\n  \"Liefert true, wenn der Spieler das Spiel `game` gewonnen hat,\n  andernfalls false.\n  See also [[game-over?]]\"\n  [{:keys [word-to-guess correct-guesses]}]\n  (= (->>\n      (word->letters word-to-guess)\n      (set))\n     correct-guesses))\n\n(defn game-lost?\n  \"Returns true if player lost, otherwise false.\n  See also [[game-over?]]\"\n  [{:keys [tries-left]}]\n  (zero? tries-left))\n\n(defn game-over?\n  \"Returns true if user guessed the word or has no tries-left,\n  otherwise false. See also [[game-won?]] and [[game-lost?]].\"\n  [game]\n  (or (game-won? game) (game-lost? game)))\n\n(defn new-game\n  \"Creates a new `game`, parameter is a string.\"\n  [word-to-guess]\n  {:word-to-guess  word-to-guess\n   :correct-guesses #{}\n   :tries-left 5})\n\n(defn guess-letter\n  \"Returns an updated `game` reflecting whether the `letter`\n  the user guessed was contained in the `word-to-guess`;\n  is the `game` over, the function returns the `game`\n  without change.\"\n  [{:keys [word-to-guess] :as game} letter]\n  (cond\n    (game-over? game) game\n    (includes? word-to-guess letter)\n    (update game :correct-guesses conj letter)\n    :else (update game :tries-left dec)))\n\n(defn score\n  \"Returns the current `score`.\"\n  [{:keys [correct-guesses]}]\n  (-> correct-guesses\n      (count)\n      (* 8)))\n\n(defn hint\n  \"Returns a vector of `correct-guesses` in correct position;\n  incorrectly guessed letters are indicated by nil.\"\n  [{:keys [word-to-guess correct-guesses]}]\n  (->>\n   word-to-guess\n   (word->letters)\n   (mapv correct-guesses)))\n\n;; Zu ratendes Wort: \"Doctronic\". Geratene Buchstaben: e n s t r o i l k\n;; Das Ergebnis ist der daraus resultierende Spielzustsand.\n(comment\n  (reduce\n   guess-letter\n   (new-game \"doctronic\")\n   [\"e\" \"n\" \"s\" \"t\" \"r\" \"o\" \"i\" \"l\" \"k\"]))\n\n;; Zu ratendes Wort: \"Doctronic\". Geratene Buchstaben: e n s t r o i l k\n;; Das Ergebnis sind  alle  Spielzust\u00e4nde, die sich aus den geratenen\n;; Buchstaben ergeben\n(comment\n  (reductions\n   guess-letter\n   (new-game \"doctronic\")\n   [\"e\" \"n\" \"s\" \"t\" \"r\" \"o\" \"i\" \"l\" \"k\"]))\n\n;; Zu ratendes Wort: \"Doctronic\". Geratene Buchstaben: e n s t r o i l k\n;; Ergebnis von hint auf die Spielzust\u00e4nde\n(comment\n  (map #(hint %)\n       (reductions\n        guess-letter\n        (new-game \"doctronic\")\n        [\"e\" \"n\" \"s\" \"t\" \"r\" \"o\" \"i\" \"l\" \"k\"])))\n\n;; Zu ratendes Wort: \"Doctronic\". Geratene Buchstaben: e n s t r o i l k\n;; Ergebnis von score auf die Spielzust\u00e4nde\n(comment\n  (map #(score %)\n       (reductions\n        guess-letter\n        (new-game \"doctronic\")\n        [\"e\" \"n\" \"s\" \"t\" \"r\" \"o\" \"i\" \"l\" \"k\"])))\n\n;; Zu ratendes Wort: \"Doctronic\". Geratene Buchstaben: e n s t r o i l k\n;; Ergebnis von score und hint auf die Spielzust\u00e4nde\n;; [(0 [nil nil nil nil nil nil nil nil nil])\n;; (0 [nil nil nil nil nil nil nil nil nil])\n;; (8 [nil nil nil nil nil nil \"n\" nil nil])\n;; (8 [nil nil nil nil nil nil \"n\" nil nil])\n;; (16 [nil nil nil \"t\" nil nil \"n\" nil nil])\n;; (24 [nil nil nil \"t\" \"r\" nil \"n\" nil nil])\n;; (32 [nil \"o\" nil \"t\" \"r\" \"o\" \"n\" nil nil])\n;; (40 [nil \"o\" nil \"t\" \"r\" \"o\" \"n\" \"i\" nil])\n;; (40 [nil \"o\" nil \"t\" \"r\" \"o\" \"n\" \"i\" nil])\n;; (40 [nil \"o\" nil \"t\" \"r\" \"o\" \"n\" \"i\" nil])]\n(comment\n  (mapv list\n        (map #(score %)\n                 (reductions\n                  guess-letter\n                  (new-game \"doctronic\")\n                  [\"e\" \"n\" \"s\" \"t\" \"r\" \"o\" \"i\" \"l\" \"k\"]))\n        (map #(hint %1)\n            (reductions\n             guess-letter\n             (new-game \"doctronic\")\n             [\"e\" \"n\" \"s\" \"t\" \"r\" \"o\" \"i\" \"l\" \"k\"]))))\n\n;; Zu ratendes Wort: \"Doctronic\". Geratene Buchstaben: e n s t r o i l k\n;; Ergebnis von score und hint auf die Spielzust\u00e4nde\n;; preferred solution!: idiomatic, shorter, clearer!\n(comment\n  (map\n   (juxt  score hint)\n   (reductions\n    guess-letter\n    (new-game \"doctronic\")\n    [\"e\" \"n\" \"s\" \"t\" \"r\" \"o\" \"i\" \"l\" \"k\"])))\n;;([0 [nil nil nil nil nil nil nil nil nil]]\n;; [0 [nil nil nil nil nil nil nil nil nil]]\n; ;[8 [nil nil nil nil nil nil \"n\" nil nil]]\n;; [8 [nil nil nil nil nil nil \"n\" nil nil]]\n;; [16 [nil nil nil \"t\" nil nil \"n\" nil nil]]\n;; [24 [nil nil nil \"t\" \"r\" nil \"n\" nil nil]]\n;; [32 [nil \"o\" nil \"t\" \"r\" \"o\" \"n\" nil nil]]\n;; [40 [nil \"o\" nil \"t\" \"r\" \"o\" \"n\" \"i\" nil]]\n;; [40 [nil \"o\" nil \"t\" \"r\" \"o\" \"n\" \"i\" nil]]\n;; [40 [nil \"o\" nil \"t\" \"r\" \"o\" \"n\" \"i\" nil]])\n"]}